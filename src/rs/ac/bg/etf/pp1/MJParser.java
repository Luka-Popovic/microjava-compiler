
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 06 13:54:06 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import org.apache.log4j.*;

/** CUP v0.10k generated parser.
  * @version Tue Feb 06 13:54:06 CET 2018
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\050\010\000\002\002\004\000\002\051" +
    "\003\000\002\004\004\000\002\004\002\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\005\010\000" +
    "\002\044\004\000\002\006\005\000\002\006\002\000\002" +
    "\006\004\000\002\006\004\000\002\063\005\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\012\004" +
    "\000\002\012\002\000\002\010\005\000\002\010\004\000" +
    "\002\043\006\000\002\043\004\000\002\011\007\000\002" +
    "\011\005\000\002\011\002\000\002\011\003\000\002\013" +
    "\007\000\002\040\004\000\002\053\004\000\002\035\003" +
    "\000\002\014\004\000\002\014\002\000\002\025\005\000" +
    "\002\025\002\000\002\015\004\000\002\015\002\000\002" +
    "\054\012\000\002\054\012\000\002\054\004\000\002\055" +
    "\004\000\002\056\004\000\002\016\003\000\002\016\002" +
    "\000\002\017\005\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\045\006\000\002\045\004\000\002" +
    "\064\003\000\002\021\004\000\002\021\002\000\002\022" +
    "\003\000\002\022\003\000\002\042\004\000\002\042\004" +
    "\000\002\042\006\000\002\036\005\000\002\037\006\000" +
    "\002\041\004\000\002\041\004\000\002\041\005\000\002" +
    "\041\007\000\002\041\010\000\002\041\005\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\005" +
    "\000\002\041\011\000\002\041\004\000\002\034\003\000" +
    "\002\003\004\000\002\003\002\000\002\061\005\000\002" +
    "\061\004\000\002\061\004\000\002\061\006\000\002\052" +
    "\004\000\002\052\006\000\002\052\003\000\002\062\003" +
    "\000\002\057\005\000\002\057\004\000\002\057\007\000" +
    "\002\066\004\000\002\066\003\000\002\066\004\000\002" +
    "\074\004\000\002\070\004\000\002\070\005\000\002\070" +
    "\004\000\002\065\004\000\002\065\003\000\002\047\004" +
    "\000\002\047\004\000\002\073\004\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\005\000\002\067\003\000\002\067\004\000\002\067\007" +
    "\000\002\067\003\000\002\067\006\000\002\071\003\000" +
    "\002\071\002\000\002\026\003\000\002\026\002\000\002" +
    "\046\005\000\002\046\003\000\002\032\004\000\002\032" +
    "\003\000\002\031\004\000\002\033\004\000\002\033\003" +
    "\000\002\030\004\000\002\060\003\000\002\060\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\010\005\001\002\000\004\002\346\001" +
    "\002\000\004\054\006\001\002\000\014\003\uffff\011\uffff" +
    "\013\uffff\054\uffff\056\uffff\001\002\000\014\003\ufffd\011" +
    "\ufffd\013\ufffd\054\ufffd\056\ufffd\001\002\000\014\003\016" +
    "\011\023\013\025\054\012\056\024\001\002\000\004\054" +
    "\343\001\002\000\052\005\uffce\007\uffce\011\uffce\014\uffce" +
    "\015\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\037\uffce\040\uffce\042\uffce\044\uffce\045\uffce" +
    "\046\uffce\050\uffce\054\uffce\001\002\000\010\003\334\007" +
    "\uffe7\046\uffe7\001\002\000\014\003\ufffb\011\ufffb\013\ufffb" +
    "\054\ufffb\056\ufffb\001\002\000\014\003\ufffa\011\ufffa\013" +
    "\ufffa\054\ufffa\056\ufffa\001\002\000\004\046\333\001\002" +
    "\000\004\011\323\001\002\000\014\003\ufffe\011\ufffe\013" +
    "\ufffe\054\ufffe\056\ufffe\001\002\000\006\011\uffe0\016\320" +
    "\001\002\000\014\003\ufffc\011\ufffc\013\ufffc\054\ufffc\056" +
    "\ufffc\001\002\000\012\003\uffdc\012\uffdc\017\uffdc\054\uffdc" +
    "\001\002\000\004\054\050\001\002\000\004\054\012\001" +
    "\002\000\004\054\047\001\002\000\004\023\030\001\002" +
    "\000\010\053\032\055\034\057\031\001\002\000\010\003" +
    "\ufff1\007\ufff1\046\ufff1\001\002\000\010\003\ufff2\007\ufff2" +
    "\046\ufff2\001\002\000\010\003\036\007\ufff6\046\ufff6\001" +
    "\002\000\010\003\ufff0\007\ufff0\046\ufff0\001\002\000\006" +
    "\007\041\046\043\001\002\000\006\007\037\046\040\001" +
    "\002\000\006\007\ufff5\046\ufff5\001\002\000\006\007\ufff4" +
    "\046\ufff4\001\002\000\004\054\045\001\002\000\010\053" +
    "\032\055\034\057\031\001\002\000\014\003\ufff9\011\ufff9" +
    "\013\ufff9\054\ufff9\056\ufff9\001\002\000\006\007\ufff7\046" +
    "\ufff7\001\002\000\004\023\046\001\002\000\010\053\ufff3" +
    "\055\ufff3\057\ufff3\001\002\000\004\023\ufff8\001\002\000" +
    "\006\011\uffe3\016\uffe3\001\002\000\012\003\055\012\056" +
    "\017\060\054\012\001\002\000\004\004\311\001\002\000" +
    "\004\004\064\001\002\000\004\054\063\001\002\000\004" +
    "\005\062\001\002\000\004\002\001\001\002\000\012\003" +
    "\uffdd\012\uffdd\017\uffdd\054\uffdd\001\002\000\004\054\061" +
    "\001\002\000\004\004\uffd7\001\002\000\012\003\uffd9\012" +
    "\uffd9\017\uffd9\054\uffd9\001\002\000\004\004\uffd8\001\002" +
    "\000\010\003\067\005\uffd5\054\012\001\002\000\006\005" +
    "\uffd1\007\uffd1\001\002\000\004\054\306\001\002\000\004" +
    "\007\305\001\002\000\006\005\uffd6\007\303\001\002\000" +
    "\006\005\uffd3\007\uffd3\001\002\000\004\005\073\001\002" +
    "\000\010\003\uffee\011\uffee\054\uffee\001\002\000\010\003" +
    "\016\011\076\054\012\001\002\000\012\003\uffef\011\uffef" +
    "\012\uffef\054\uffef\001\002\000\032\003\uffcc\004\uffcc\006" +
    "\uffcc\011\uffcc\012\uffcc\024\uffcc\035\uffcc\041\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\001\002\000\032\003\122\004" +
    "\115\006\102\011\112\012\114\024\121\035\111\041\117" +
    "\047\113\051\110\052\103\054\105\001\002\000\014\004" +
    "\277\014\uffae\020\276\021\274\023\275\001\002\000\030" +
    "\003\122\004\115\006\102\011\112\024\121\035\111\041" +
    "\117\047\113\051\110\052\103\054\105\001\002\000\004" +
    "\004\265\001\002\000\004\046\264\001\002\000\030\003" +
    "\122\004\115\006\102\011\112\024\121\035\111\041\117" +
    "\047\113\051\110\052\103\054\105\001\002\000\060\004" +
    "\uffaf\005\uffaf\007\uffaf\014\uffaf\015\uffaf\020\uffaf\021\uffaf" +
    "\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\036\255\037\uffaf\040\uffaf\042\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\050\uffaf\001\002\000\004\046\254\001" +
    "\002\000\004\014\250\001\002\000\022\004\147\022\135" +
    "\026\132\046\246\053\140\054\105\055\144\057\141\001" +
    "\002\000\004\004\217\001\002\000\032\003\uffcc\004\uffcc" +
    "\006\uffcc\011\uffcc\012\uffcc\024\uffcc\035\uffcc\041\uffcc\047" +
    "\uffcc\051\uffcc\052\uffcc\054\uffcc\001\002\000\030\003\uffb8" +
    "\004\uffb8\006\uffb8\011\uffb8\024\uffb8\035\uffb8\041\uffb8\047" +
    "\uffb8\051\uffb8\052\uffb8\054\uffb8\001\002\000\012\003\uffdb" +
    "\012\uffdb\017\uffdb\054\uffdb\001\002\000\004\003\213\001" +
    "\002\000\030\003\122\004\115\006\102\011\112\024\121" +
    "\035\111\041\117\047\113\051\110\052\103\054\105\001" +
    "\002\000\004\046\210\001\002\000\034\003\uffca\004\uffca" +
    "\006\uffca\011\uffca\012\uffca\024\uffca\035\uffca\041\uffca\043" +
    "\uffca\047\uffca\051\uffca\052\uffca\054\uffca\001\002\000\004" +
    "\004\131\001\002\000\004\046\130\001\002\000\032\003" +
    "\uffcd\004\uffcd\006\uffcd\011\uffcd\012\uffcd\024\uffcd\035\uffcd" +
    "\041\uffcd\047\uffcd\051\uffcd\052\uffcd\054\uffcd\001\002\000" +
    "\004\054\126\001\002\000\034\003\uffcb\004\uffcb\006\uffcb" +
    "\011\uffcb\012\uffcb\024\uffcb\035\uffcb\041\uffcb\043\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\054\uffcb\001\002\000\060\004\uffb1" +
    "\005\uffb1\007\uffb1\014\uffb1\015\uffb1\020\uffb1\021\uffb1\023" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\036\127\037\uffb1\040\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\050\uffb1\001\002\000\004\054\uffad\001\002" +
    "\000\036\003\uffb9\004\uffb9\006\uffb9\011\uffb9\012\uffb9\024" +
    "\uffb9\034\uffb9\035\uffb9\041\uffb9\043\uffb9\047\uffb9\051\uffb9" +
    "\052\uffb9\054\uffb9\001\002\000\020\004\147\022\135\026" +
    "\132\053\140\054\105\055\144\057\141\001\002\000\016" +
    "\004\147\022\135\053\140\054\105\055\144\057\141\001" +
    "\002\000\016\004\147\022\135\053\140\054\105\055\144" +
    "\057\141\001\002\000\006\005\uffb6\007\201\001\002\000" +
    "\004\054\012\001\002\000\050\004\164\005\uff93\007\uff93" +
    "\014\uffae\015\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\037\uff93\040\uff93\042\uff93\044\uff93" +
    "\045\uff93\046\uff93\050\uff93\001\002\000\016\004\147\022" +
    "\135\053\140\054\105\055\144\057\141\001\002\000\044" +
    "\005\uff99\007\uff99\015\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\037\uff99\040\uff99\042\uff99" +
    "\044\uff99\045\uff99\046\uff99\050\uff99\001\002\000\044\005" +
    "\uff96\007\uff96\015\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\037\uff96\040\uff96\042\uff96\044" +
    "\uff96\045\uff96\046\uff96\050\uff96\001\002\000\010\027\156" +
    "\030\157\031\155\001\002\000\036\005\uffa9\007\uffa9\015" +
    "\uffa9\025\152\026\153\032\uffa9\033\uffa9\037\uffa9\040\uffa9" +
    "\042\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\001\002\000" +
    "\044\005\uff98\007\uff98\015\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\037\uff98\040\uff98\042" +
    "\uff98\044\uff98\045\uff98\046\uff98\050\uff98\001\002\000\044" +
    "\005\uffa2\007\uffa2\015\uffa2\025\uffa2\026\uffa2\027\156\030" +
    "\157\031\155\032\uffa2\033\uffa2\037\uffa2\040\uffa2\042\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\050\uffa2\001\002\000\006\025" +
    "\152\026\153\001\002\000\020\004\147\022\135\026\132" +
    "\053\140\054\105\055\144\057\141\001\002\000\004\005" +
    "\151\001\002\000\044\005\uff97\007\uff97\015\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\037" +
    "\uff97\040\uff97\042\uff97\044\uff97\045\uff97\046\uff97\050\uff97" +
    "\001\002\000\016\004\uff9e\022\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\057\uff9e\001\002\000\016\004\uff9d\022\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\057\uff9d\001\002\000\016\004\uffa6\022" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\057\uffa6\001\002\000\016" +
    "\004\uff9a\022\uff9a\053\uff9a\054\uff9a\055\uff9a\057\uff9a\001" +
    "\002\000\016\004\uff9c\022\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\057\uff9c\001\002\000\016\004\uff9b\022\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\057\uff9b\001\002\000\016\004\uffa0\022\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\057\uffa0\001\002\000\016\004" +
    "\uffa4\022\uffa4\053\uffa4\054\uffa4\055\uffa4\057\uffa4\001\002" +
    "\000\016\004\uffa1\022\uffa1\053\uffa1\054\uffa1\055\uffa1\057" +
    "\uffa1\001\002\000\036\005\uffaa\007\uffaa\015\uffaa\025\uffa7" +
    "\026\uffa7\032\uffaa\033\uffaa\037\uffaa\040\uffaa\042\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\050\uffaa\001\002\000\022\004\147" +
    "\005\uff8e\022\135\026\132\053\140\054\105\055\144\057" +
    "\141\001\002\000\006\005\uff8f\007\171\001\002\000\006" +
    "\005\uff8c\007\uff8c\001\002\000\004\005\170\001\002\000" +
    "\044\005\uff92\007\uff92\015\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\037\uff92\040\uff92\042" +
    "\uff92\044\uff92\045\uff92\046\uff92\050\uff92\001\002\000\020" +
    "\004\147\022\135\026\132\053\140\054\105\055\144\057" +
    "\141\001\002\000\006\005\uff8d\007\uff8d\001\002\000\046" +
    "\005\uff95\007\uff95\014\174\015\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\037\uff95\040\uff95" +
    "\042\uff95\044\uff95\045\uff95\046\uff95\050\uff95\001\002\000" +
    "\022\004\147\015\uff90\022\135\026\132\053\140\054\105" +
    "\055\144\057\141\001\002\000\004\015\177\001\002\000" +
    "\004\015\uff91\001\002\000\044\005\uff94\007\uff94\015\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\037\uff94\040\uff94\042\uff94\044\uff94\045\uff94\046\uff94" +
    "\050\uff94\001\002\000\004\005\203\001\002\000\004\053" +
    "\202\001\002\000\004\005\uffb7\001\002\000\004\046\204" +
    "\001\002\000\036\003\uffc0\004\uffc0\006\uffc0\011\uffc0\012" +
    "\uffc0\024\uffc0\034\uffc0\035\uffc0\041\uffc0\043\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\001\002\000\044\005\uffa3\007" +
    "\uffa3\015\uffa3\025\uffa3\026\uffa3\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uffa3\033\uffa3\037\uffa3\040\uffa3\042\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\050\uffa3\001\002\000\036\005\uffa8\007\uffa8" +
    "\015\uffa8\025\152\026\153\032\uffa8\033\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\001\002" +
    "\000\016\004\uffa5\022\uffa5\053\uffa5\054\uffa5\055\uffa5\057" +
    "\uffa5\001\002\000\036\003\uffbe\004\uffbe\006\uffbe\011\uffbe" +
    "\012\uffbe\024\uffbe\034\uffbe\035\uffbe\041\uffbe\043\uffbe\047" +
    "\uffbe\051\uffbe\052\uffbe\054\uffbe\001\002\000\034\003\uffc8" +
    "\004\uffc8\006\uffc8\011\uffc8\012\uffc8\024\uffc8\035\uffc8\041" +
    "\uffc8\043\uffc8\047\uffc8\051\uffc8\052\uffc8\054\uffc8\001\002" +
    "\000\036\003\uffc3\004\uffc3\006\uffc3\011\uffc3\012\uffc3\024" +
    "\uffc3\034\uffc3\035\uffc3\041\uffc3\043\uffc3\047\uffc3\051\uffc3" +
    "\052\uffc3\054\uffc3\001\002\000\004\005\214\001\002\000" +
    "\036\003\uffc2\004\uffc2\006\uffc2\011\uffc2\012\uffc2\024\uffc2" +
    "\034\uffc2\035\uffc2\041\uffc2\043\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\054\uffc2\001\002\000\032\003\122\004\115\006\102" +
    "\011\112\012\216\024\121\035\111\041\117\047\113\051" +
    "\110\052\103\054\105\001\002\000\036\003\uffbf\004\uffbf" +
    "\006\uffbf\011\uffbf\012\uffbf\024\uffbf\034\uffbf\035\uffbf\041" +
    "\uffbf\043\uffbf\047\uffbf\051\uffbf\052\uffbf\054\uffbf\001\002" +
    "\000\022\003\224\004\147\022\135\026\132\053\140\054" +
    "\105\055\144\057\141\001\002\000\020\004\147\022\135" +
    "\026\132\053\140\054\105\055\144\057\141\001\002\000" +
    "\010\005\uff87\032\uff87\033\uff87\001\002\000\020\004\147" +
    "\022\135\026\132\053\140\054\105\055\144\057\141\001" +
    "\002\000\024\005\uff85\032\uff85\033\uff85\037\235\040\234" +
    "\042\236\044\233\045\237\050\240\001\002\000\004\005" +
    "\232\001\002\000\010\005\uff8a\032\231\033\uff8a\001\002" +
    "\000\006\005\230\033\227\001\002\000\020\004\uff89\022" +
    "\uff89\026\uff89\053\uff89\054\uff89\055\uff89\057\uff89\001\002" +
    "\000\030\003\uffc5\004\uffc5\006\uffc5\011\uffc5\024\uffc5\035" +
    "\uffc5\041\uffc5\047\uffc5\051\uffc5\052\uffc5\054\uffc5\001\002" +
    "\000\020\004\uff86\022\uff86\026\uff86\053\uff86\054\uff86\055" +
    "\uff86\057\uff86\001\002\000\034\003\uffc7\004\uffc7\006\uffc7" +
    "\011\uffc7\012\uffc7\024\uffc7\035\uffc7\041\uffc7\043\uffc7\047" +
    "\uffc7\051\uffc7\052\uffc7\054\uffc7\001\002\000\020\004\uff82" +
    "\022\uff82\026\uff82\053\uff82\054\uff82\055\uff82\057\uff82\001" +
    "\002\000\020\004\uff7e\022\uff7e\026\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\057\uff7e\001\002\000\020\004\uff7f\022\uff7f\026" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\057\uff7f\001\002\000\020" +
    "\004\uff81\022\uff81\026\uff81\053\uff81\054\uff81\055\uff81\057" +
    "\uff81\001\002\000\020\004\uff80\022\uff80\026\uff80\053\uff80" +
    "\054\uff80\055\uff80\057\uff80\001\002\000\020\004\uff83\022" +
    "\uff83\026\uff83\053\uff83\054\uff83\055\uff83\057\uff83\001\002" +
    "\000\020\004\147\022\135\026\132\053\140\054\105\055" +
    "\144\057\141\001\002\000\010\005\uff84\032\uff84\033\uff84" +
    "\001\002\000\010\005\uff88\032\uff88\033\uff88\001\002\000" +
    "\010\005\uff8b\032\231\033\uff8b\001\002\000\004\046\247" +
    "\001\002\000\036\003\uffbc\004\uffbc\006\uffbc\011\uffbc\012" +
    "\uffbc\024\uffbc\034\uffbc\035\uffbc\041\uffbc\043\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\001\002\000\036\003\uffbb\004" +
    "\uffbb\006\uffbb\011\uffbb\012\uffbb\024\uffbb\034\uffbb\035\uffbb" +
    "\041\uffbb\043\uffbb\047\uffbb\051\uffbb\052\uffbb\054\uffbb\001" +
    "\002\000\020\004\147\022\135\026\132\053\140\054\105" +
    "\055\144\057\141\001\002\000\004\015\252\001\002\000" +
    "\060\004\uffb0\005\uffb0\007\uffb0\014\uffb0\015\uffb0\020\uffb0" +
    "\021\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\036\253\037\uffb0\040\uffb0\042\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\050\uffb0\001\002\000\004\054" +
    "\uffab\001\002\000\036\003\uffc4\004\uffc4\006\uffc4\011\uffc4" +
    "\012\uffc4\024\uffc4\034\uffc4\035\uffc4\041\uffc4\043\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\001\002\000\004\054\uffac" +
    "\001\002\000\004\043\257\001\002\000\004\004\260\001" +
    "\002\000\020\004\147\022\135\026\132\053\140\054\105" +
    "\055\144\057\141\001\002\000\006\005\262\033\227\001" +
    "\002\000\004\046\263\001\002\000\036\003\uffba\004\uffba" +
    "\006\uffba\011\uffba\012\uffba\024\uffba\034\uffba\035\uffba\041" +
    "\uffba\043\uffba\047\uffba\051\uffba\052\uffba\054\uffba\001\002" +
    "\000\036\003\uffbd\004\uffbd\006\uffbd\011\uffbd\012\uffbd\024" +
    "\uffbd\034\uffbd\035\uffbd\041\uffbd\043\uffbd\047\uffbd\051\uffbd" +
    "\052\uffbd\054\uffbd\001\002\000\004\054\105\001\002\000" +
    "\006\005\267\014\uffae\001\002\000\004\046\270\001\002" +
    "\000\036\003\uffc1\004\uffc1\006\uffc1\011\uffc1\012\uffc1\024" +
    "\uffc1\034\uffc1\035\uffc1\041\uffc1\043\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\054\uffc1\001\002\000\034\003\uffc9\004\uffc9\006" +
    "\uffc9\011\uffc9\012\uffc9\024\uffc9\035\uffc9\041\uffc9\043\uffc9" +
    "\047\uffc9\051\uffc9\052\uffc9\054\uffc9\001\002\000\036\003" +
    "\uffcb\004\uffcb\006\uffcb\011\uffcb\012\uffcb\024\uffcb\034\273" +
    "\035\uffcb\041\uffcb\043\uffcb\047\uffcb\051\uffcb\052\uffcb\054" +
    "\uffcb\001\002\000\030\003\uffc6\004\uffc6\006\uffc6\011\uffc6" +
    "\024\uffc6\035\uffc6\041\uffc6\047\uffc6\051\uffc6\052\uffc6\054" +
    "\uffc6\001\002\000\004\046\uffb3\001\002\000\020\004\147" +
    "\022\135\026\132\053\140\054\105\055\144\057\141\001" +
    "\002\000\004\046\uffb4\001\002\000\022\004\147\005\uff8e" +
    "\022\135\026\132\053\140\054\105\055\144\057\141\001" +
    "\002\000\004\005\301\001\002\000\004\046\uffb2\001\002" +
    "\000\004\046\uffb5\001\002\000\004\054\012\001\002\000" +
    "\006\005\uffd4\007\uffd4\001\002\000\006\005\uffd2\007\uffd2" +
    "\001\002\000\010\005\uffcf\007\uffcf\014\307\001\002\000" +
    "\004\015\310\001\002\000\006\005\uffd0\007\uffd0\001\002" +
    "\000\010\003\067\005\uffd5\054\012\001\002\000\004\005" +
    "\313\001\002\000\010\003\uffee\011\uffee\054\uffee\001\002" +
    "\000\010\003\016\011\315\054\012\001\002\000\032\003" +
    "\uffcc\004\uffcc\006\uffcc\011\uffcc\012\uffcc\024\uffcc\035\uffcc" +
    "\041\uffcc\047\uffcc\051\uffcc\052\uffcc\054\uffcc\001\002\000" +
    "\032\003\122\004\115\006\102\011\112\012\317\024\121" +
    "\035\111\041\117\047\113\051\110\052\103\054\105\001" +
    "\002\000\012\003\uffda\012\uffda\017\uffda\054\uffda\001\002" +
    "\000\004\054\012\001\002\000\004\011\uffe4\001\002\000" +
    "\004\011\uffe1\001\002\000\012\003\uffee\011\uffee\012\uffee" +
    "\054\uffee\001\002\000\006\011\326\012\uffde\001\002\000" +
    "\012\003\016\011\uffe2\012\uffe2\054\012\001\002\000\012" +
    "\003\uffdc\012\uffdc\017\uffdc\054\uffdc\001\002\000\004\012" +
    "\330\001\002\000\014\003\uffe5\011\uffe5\013\uffe5\054\uffe5" +
    "\056\uffe5\001\002\000\012\003\055\012\332\017\060\054" +
    "\012\001\002\000\004\012\uffdf\001\002\000\016\003\uffec" +
    "\011\uffec\012\uffec\013\uffec\054\uffec\056\uffec\001\002\000" +
    "\006\007\uffe6\046\uffe6\001\002\000\006\007\336\046\337" +
    "\001\002\000\004\054\340\001\002\000\016\003\uffed\011" +
    "\uffed\012\uffed\013\uffed\054\uffed\056\uffed\001\002\000\010" +
    "\007\uffe8\014\341\046\uffe8\001\002\000\004\015\342\001" +
    "\002\000\006\007\uffe9\046\uffe9\001\002\000\012\003\uffea" +
    "\007\uffea\014\344\046\uffea\001\002\000\004\015\345\001" +
    "\002\000\010\003\uffeb\007\uffeb\046\uffeb\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\050\003\001\001\000\002\001\001\000" +
    "\004\051\006\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\022\005\021\007\017\010\013\013\014\040" +
    "\016\043\012\053\020\064\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\320\001\001\000\002\001" +
    "\001\000\004\015\050\001\001\000\002\001\001\000\006" +
    "\044\026\064\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\034\001\001\000\002\001\001\000" +
    "\004\063\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\054\056\055\052\056\051\064\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\071\017\067\020\070\045\064\064\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\073\001\001\000\010\010\074\043\012\064\010\001" +
    "\001\000\002\001\001\000\004\021\076\001\001\000\026" +
    "\022\122\034\103\036\115\037\100\041\124\042\117\052" +
    "\077\057\123\061\105\062\106\001\001\000\002\001\001" +
    "\000\026\022\270\034\103\036\115\037\100\041\271\042" +
    "\117\052\077\057\123\061\105\062\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\022\255\034\103\036" +
    "\115\037\100\041\124\042\117\052\077\057\123\061\105" +
    "\062\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\047\132\052\135\057\123\062\106" +
    "\065\142\066\244\067\144\070\136\073\141\074\145\001" +
    "\001\000\002\001\001\000\004\021\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\034" +
    "\103\036\115\037\100\041\211\042\210\052\077\057\123" +
    "\061\105\062\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\047\132\052\135" +
    "\057\123\062\106\065\142\066\133\067\144\070\136\073" +
    "\141\074\145\001\001\000\020\047\132\052\135\057\123" +
    "\062\106\065\205\067\144\073\141\001\001\000\012\052" +
    "\135\057\123\062\106\067\204\001\001\000\004\003\177" +
    "\001\001\000\004\064\172\001\001\000\002\001\001\000" +
    "\020\047\132\052\135\057\123\062\106\065\162\067\144" +
    "\073\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\161\001\001\000\004\023\160\001\001\000\002" +
    "\001\001\000\004\024\157\001\001\000\004\023\153\001" +
    "\001\000\026\047\132\052\135\057\123\062\106\065\142" +
    "\066\147\067\144\070\136\073\141\074\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\026\166\046" +
    "\164\047\132\052\135\057\123\062\106\065\142\066\165" +
    "\067\144\070\136\073\141\074\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\047\132\052\135\057\123\062\106\065\142\066" +
    "\171\067\144\070\136\073\141\074\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\047\132\052\135\057" +
    "\123\062\106\065\142\066\175\067\144\070\136\071\174" +
    "\073\141\074\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\022\122\034\103" +
    "\036\115\037\100\041\124\042\117\052\077\057\123\061" +
    "\105\062\106\001\001\000\002\001\001\000\040\030\221" +
    "\031\217\032\225\033\224\047\132\052\135\057\123\060" +
    "\220\062\106\065\142\066\222\067\144\070\136\073\141" +
    "\074\145\001\001\000\034\030\221\033\243\047\132\052" +
    "\135\057\123\060\220\062\106\065\142\066\222\067\144" +
    "\070\136\073\141\074\145\001\001\000\002\001\001\000" +
    "\030\047\132\052\135\057\123\060\242\062\106\065\142" +
    "\066\222\067\144\070\136\073\141\074\145\001\001\000" +
    "\004\027\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\047\132\052\135\057\123" +
    "\062\106\065\142\066\241\067\144\070\136\073\141\074" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\047\132\052\135\057\123\062\106\065\142" +
    "\066\250\067\144\070\136\073\141\074\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\030\221\031\217\032\260\033\224\047\132" +
    "\052\135\057\123\060\220\062\106\065\142\066\222\067" +
    "\144\070\136\073\141\074\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\265\057\123\062\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\047\132\052\135\057\123\062\106\065\142\066\301\067" +
    "\144\070\136\073\141\074\145\001\001\000\002\001\001" +
    "\000\032\026\277\046\164\047\132\052\135\057\123\062" +
    "\106\065\142\066\165\067\144\070\136\073\141\074\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\303\045\064\064\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\311\017\067\020\070" +
    "\045\064\064\065\001\001\000\002\001\001\000\004\012" +
    "\313\001\001\000\010\010\074\043\012\064\010\001\001" +
    "\000\004\021\315\001\001\000\026\022\122\034\103\036" +
    "\115\037\100\041\124\042\117\052\077\057\123\061\105" +
    "\062\106\001\001\000\002\001\001\000\004\064\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\324" +
    "\035\323\001\001\000\004\025\326\001\001\000\010\010" +
    "\074\043\012\064\010\001\001\000\004\015\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\056\055" +
    "\052\056\051\064\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= LOWER_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new LowerEqualRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= LOWER 
            {
              Relop RESULT = null;
		 RESULT=new LowerRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= GREATER_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new GreaterEqualRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new GreaterRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= NOT_BIN_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new NotBinEquality(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= BIN_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new BinEquality(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionFactors(e1, R1, e2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionFactor(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CondTermLogicalAnd ::= CondTerm LOGICAL_AND 
            {
              CondTermLogicalAnd RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new CondTermAnd(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*CondTermLogicalAnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CondTerm ::= CondTermLogicalAnd CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTermLogicalAnd C1 = (CondTermLogicalAnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTerms(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CondTermLogicalOr ::= Condition LOGICAL_OR 
            {
              CondTermLogicalOr RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new CondTermOr(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*CondTermLogicalOr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Condition ::= CondTermLogicalOr CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTermLogicalOr C1 = (CondTermLogicalOr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ActualParamList ::= Expr 
            {
              ActualParamList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParam(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              ActualParamList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActualParamList A1 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new NoActuals(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActPars ::= ActualParamList 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActualParamList A1 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Actuals(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PotentialExpr ::= 
            {
              PotentialExpr RESULT = null;
		 RESULT=new WithNoExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*PotentialExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PotentialExpr ::= Expr 
            {
              PotentialExpr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new WithExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*PotentialExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Designator LPARENT ActPars RPARENT 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCall(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var(d); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= NEW Type L_SQUARE_PARENT PotentialExpr R_SQUARE_PARENT 
            {
              Factor RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		PotentialExpr P1 = (PotentialExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewTypeWithExpr(type, P1); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= NEW Type 
            {
              Factor RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNewType(type); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= BOOL_CONST 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBooleanConst(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= LPARENT Expr RPARENT 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= CHAR_CONST 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NUM_CONST 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNumberConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new Mod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new Div(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new Mul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new Minus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new Plus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TermMul ::= TermMulop Factor 
            {
              TermMul RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TermMulop T1 = (TermMulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMulOperation(T1, fact); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*TermMul*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TermMulop ::= Factor Mulop 
            {
              TermMulop RESULT = null;
		int factleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermFact(fact, M1); RESULT.setLine(factleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*TermMulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TermMulop ::= TermMul Mulop 
            {
              TermMulop RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TermMul T1 = (TermMul)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorMulop(T1, M2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*TermMulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Factor 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleTerm(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Term ::= TermMulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TermMulop T1 = (TermMulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermList(T1, fact); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprList ::= Term Addop 
            {
              ExprList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprTerm(T1, A2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprList ::= MINUS Term Addop 
            {
              ExprList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprTermMinus(T1, A2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprList ::= ExprAdd Addop 
            {
              ExprList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprAdd E1 = (ExprAdd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprAddop(E1, A2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprAdd ::= ExprList Term 
            {
              ExprAdd RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprList E1 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprAddOpOperation(E1, T2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*ExprAdd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleExprMinus(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleExpr(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ExprList Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprList E1 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprLists(E1, T2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorDot ::= DesignatorArr L_SQUARE_PARENT Expr R_SQUARE_PARENT DOT 
            {
              DesignatorDot RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		DesignatorArr D1 = (DesignatorArr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new SingleDesignatorExprArray(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorDot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorDot ::= IDENT DOT 
            {
              DesignatorDot RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new SingleDesignatorDot(field); RESULT.setLine(fieldleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorDot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorDot ::= DesignatorDot IDENT DOT 
            {
              DesignatorDot RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorDot D1 = (DesignatorDot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorDots(D1, field); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorDot*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorArr ::= Designator 
            {
              DesignatorArr RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorArray(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*DesignatorArr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int dNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String dName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorIdent(dName); RESULT.setLine(dNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Designator ::= DesignatorArr L_SQUARE_PARENT Expr R_SQUARE_PARENT 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorArr D1 = (DesignatorArr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorExpr(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Designator ::= DesignatorDot IDENT 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorDot D1 = (DesignatorDot)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorDotIdent(D1, field); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatement ::= Designator LPARENT ActPars RPARENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementProcCall(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorStatement ::= Designator DECREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DesignatorStatement ::= Designator INCREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DesignatorStatement ::= Designator EQUAL Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementAssignment(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PotentialNumber ::= 
            {
              PotentialNumber RESULT = null;
		 RESULT=new NoPotentialNumbers(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*PotentialNumber*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PotentialNumber ::= COMMA NUM_CONST 
            {
              PotentialNumber RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PotentialNumbers(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*PotentialNumber*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DoStatement ::= DO 
            {
              DoStatement RESULT = null;
		 RESULT=new DoStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*DoStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= error SEMI_COMMA 
            {
              Matched RESULT = null;
		 parser.report_info("Uspesno izvrsen oporavak od greske do ; koji je nastao zbog greske pri pisanju izraza dodele vrednosti",null);  RESULT=new ErrAssignment(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= DoStatement Statement WHILE LPARENT Condition RPARENT SEMI_COMMA 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		DoStatement D1 = (DoStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C3 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DoWhileExpr(D1, S2, C3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= RETURN Expr SEMI_COMMA 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= RETURN SEMI_COMMA 
            {
              Matched RESULT = null;
		 RESULT=new NoReturnExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= CONTINUE SEMI_COMMA 
            {
              Matched RESULT = null;
		 RESULT=new ContinueExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= BREAK SEMI_COMMA 
            {
              Matched RESULT = null;
		 RESULT=new BreakExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= L_BRACE StatementList R_BRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Statements(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= PRINT LPARENT Expr PotentialNumber RPARENT SEMI_COMMA 
            {
              Matched RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		PotentialNumber P1 = (PotentialNumber)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStmt(exp, P1); RESULT.setLine(expleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= READ LPARENT Designator RPARENT SEMI_COMMA 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= LPARENT error RPARENT 
            {
              Matched RESULT = null;
		 RESULT=new MatchedIfError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= IfBothPart Matched 
            {
              Matched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfBothPart I1 = (IfBothPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedIf(I1, M2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= DesignatorStatement SEMI_COMMA 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Assignment(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DoMathcPart ::= IF LPARENT Condition RPARENT 
            {
              DoMathcPart RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ThenPart(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DoMathcPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfBothPart ::= DoMathcPart Matched ELSE 
            {
              IfBothPart RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DoMathcPart D1 = (DoMathcPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IfPart(D1, M2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*IfBothPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Unmatched ::= IF LPARENT error RPARENT 
            {
              Unmatched RESULT = null;
		 RESULT=new UnmatchedIfError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Unmatched ::= IfBothPart Unmatched 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfBothPart I1 = (IfBothPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int U2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U2 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(I1, U2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Unmatched ::= DoMathcPart Statement 
            {
              Unmatched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DoMathcPart D1 = (DoMathcPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(D1, S2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatementLists(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementLists(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParamName ::= Type IDENT 
            {
              FormalParamName RESULT = null;
		int fpTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fpTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type fpType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fpNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fpNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String fpName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParamNameNoSqParent(fpType, fpName); RESULT.setLine(fpTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*FormalParamName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParamName ::= Type IDENT L_SQUARE_PARENT R_SQUARE_PARENT 
            {
              FormalParamName RESULT = null;
		int fpTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fpTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type fpType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int fpNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int fpNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String fpName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new FormalParamNameSqParent(fpType, fpName); RESULT.setLine(fpTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*FormalParamName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParamDecl ::= FormalParamName 
            {
              FormalParamDecl RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamName F1 = (FormalParamName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameterDeclaration(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParamList ::= error COMMA 
            {
              FormalParamList RESULT = null;
		 RESULT=new FormalParamListErrorComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParamList ::= FormalParamDecl 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDecl F1 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleFormalParameterList(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormalParamList F1 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDecl F2 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameterList(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormalPars ::= 
            {
              FormalPars RESULT = null;
		 RESULT=new NoFormalParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*FormalPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalPars ::= FormalParamList 
            {
              FormalPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamList F1 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameters(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*FormalPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VoidType ::= VOID IDENT 
            {
              VoidType RESULT = null;
		int voidMethNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int voidMethNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String voidMethName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VoidType(voidMethName); RESULT.setLine(voidMethNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*VoidType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclName ::= Type IDENT 
            {
              MethodDeclName RESULT = null;
		int chTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int chTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type chType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclName(chType, methName); RESULT.setLine(chTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*MethodDeclName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDecl ::= error RPARENT 
            {
              MethodDecl RESULT = null;
		 RESULT=new MethodDeclError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= VoidType LPARENT FormalPars RPARENT VarDeclParam L_BRACE StatementList R_BRACE 
            {
              MethodDecl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		VoidType V1 = (VoidType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormalPars F2 = (FormalPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclParam V3 = (VarDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclarationVoid(V1, F2, V3, S4); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDecl ::= MethodDeclName LPARENT FormalPars RPARENT VarDeclParam L_BRACE StatementList R_BRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodDeclName M1 = (MethodDeclName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormalPars F2 = (FormalPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclParam V3 = (VarDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDeclarationList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclParam ::= 
            {
              MethodDeclParam RESULT = null;
		 RESULT=new NoMethodDeclarationParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclParam ::= L_BRACE MethodDeclList R_BRACE 
            {
              MethodDeclParam RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclarationParam(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PotentialExtend ::= 
            {
              PotentialExtend RESULT = null;
		 RESULT=new NoPotentialExtends(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*PotentialExtend*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PotentialExtend ::= EXTENDS Type 
            {
              PotentialExtend RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type typeName = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PotentialExtends(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*PotentialExtend*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDeclParamClass ::= VarDeclParam 
            {
              VarDeclParamClass RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclParam V1 = (VarDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDClass(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*VarDeclParamClass*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclName ::= CLASS IDENT 
            {
              ClassDeclName RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String classType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassDeclName(classType, className); RESULT.setLine(classTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*ClassDeclName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDeclFirstPart ::= ClassDeclName PotentialExtend 
            {
              ClassDeclFirstPart RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassDeclName C1 = (ClassDeclName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		PotentialExtend P2 = (PotentialExtend)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassDeclarationFirstPart(C1, P2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*ClassDeclFirstPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDeclList ::= ClassDeclFirstPart L_BRACE VarDeclParamClass MethodDeclParam R_BRACE 
            {
              ClassDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ClassDeclFirstPart C1 = (ClassDeclFirstPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclParamClass V2 = (VarDeclParamClass)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclParam M3 = (MethodDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDeclarationList(C1, V2, M3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*ClassDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDecl ::= error 
            {
              VarDecl RESULT = null;
		 parser.report_info("Uspesno izvrsen oporavak od greske koji je nastao zbog greske pri definisanju promenljive",null);  RESULT=new VarDeclarationCommaError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= 
            {
              VarDecl RESULT = null;
		 RESULT=new NoVarDeclaration(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= VarDecl COMMA IDENT 
            {
              VarDecl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int VarDeclNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int VarDeclNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String VarDeclName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationNoSqParent(V1, VarDeclName); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= VarDecl COMMA IDENT L_SQUARE_PARENT R_SQUARE_PARENT 
            {
              VarDecl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int VarDeclNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int VarDeclNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String VarDeclName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarDeclarationSqParent(V1, VarDeclName); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarTypeName ::= Type IDENT 
            {
              VarTypeName RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarTypeNameNoSqParent(varType, varName); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*VarTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarTypeName ::= Type IDENT L_SQUARE_PARENT R_SQUARE_PARENT 
            {
              VarTypeName RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarTypeNameSqParent(varType, varName); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*VarTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclList ::= error SEMI_COMMA 
            {
              VarDeclList RESULT = null;
		 parser.report_info("Uspesno izvrsen oporavak od greske do ; koji je nastao zbog greske pri definisanju promenljive",null);  RESULT=new VarDeclarationListError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= VarTypeName VarDecl SEMI_COMMA 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarTypeName V1 = (VarTypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclParam ::= 
            {
              VarDeclParam RESULT = null;
		 RESULT=new NoVarDeclarationParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclParam ::= VarDeclParam VarDeclList 
            {
              VarDeclParam RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclParam V1 = (VarDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclList V2 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationParam(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstTypeList ::= CHAR_CONST 
            {
              ConstTypeList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ConstTypeList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstTypeList ::= BOOL_CONST 
            {
              ConstTypeList RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BooleanConst(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ConstTypeList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstTypeList ::= NUM_CONST 
            {
              ConstTypeList RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumberConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ConstTypeList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclarIdent ::= COMMA IDENT EQUAL 
            {
              ConstDeclarIdent RESULT = null;
		int ConstDeclParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ConstDeclParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String ConstDeclParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclrIdent(ConstDeclParamName); RESULT.setLine(ConstDeclParamNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstDeclarIdent*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclParam ::= error SEMI_COMMA 
            {
              ConstDeclParam RESULT = null;
		 RESULT=new ConstDeclParamErrorSemiComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclParam ::= error COMMA 
            {
              ConstDeclParam RESULT = null;
		 RESULT=new ConstDeclParamErrorComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclParam ::= 
            {
              ConstDeclParam RESULT = null;
		 RESULT=new NoConstDeclarationParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclParam ::= ConstDeclParam ConstDeclarIdent ConstTypeList 
            {
              ConstDeclParam RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclParam C1 = (ConstDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclarIdent C2 = (ConstDeclarIdent)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstTypeList C3 = (ConstTypeList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclarationParam(C1, C2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDeclParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstTypeName ::= Type IDENT 
            {
              ConstTypeName RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstTypeName(constType, constName); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*ConstTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST ConstTypeName EQUAL ConstTypeList ConstDeclParam SEMI_COMMA 
            {
              ConstDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConstTypeName C1 = (ConstTypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstTypeList C2 = (ConstTypeList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclParam C3 = (ConstDeclParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclaration(C1, C2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstList ::= ClassDeclList 
            {
              ConstList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDeclList C1 = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstListClasstDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ConstList ::= VarDeclList 
            {
              ConstList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstListVarDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ConstList ::= ConstDecl 
            {
              ConstList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstListConstDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ConstDeclList ::= 
            {
              ConstDeclList RESULT = null;
		 RESULT=new NoConstDeclarationList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ConstDeclList ::= ConstDeclList ConstList 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstList C2 = (ConstList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclarationList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(pName); RESULT.setLine(pNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ConstDeclList L_BRACE MethodDeclList R_BRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, C1, M2); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

